{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonsDisplay","persons","deleteAPerson","map","person","deleteThisPerson","name","Person","number","onClick","Field","text","value","onChange","Notification","message","type","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","search","setSearch","errorMessage","setErrorMessage","errorType","setErrorType","useEffect","personsService","initialPersons","showNotification","setTimeout","showError","personsToShow","filter","includes","event","target","onSubmit","preventDefault","window","confirm","find","p","updatedPerson","returnedPersons","newPersons","catch","error","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91bac3c4.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteThis = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  deleteThis: deleteThis\n}","import React, { useState, useEffect } from 'react'\nimport personsService from \"./services/persons\"\n\nconst PersonsDisplay = ({ persons, deleteAPerson }) => {\n  return(\n    <div>\n      <ul>\n        {persons.map(person => \n          <Person\n            key={person.name}\n            person={person}\n            deleteThisPerson={() => deleteAPerson(person)}\n          />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nconst Person = ({ person , deleteThisPerson}) => {\n  return(\n    <div>\n      <li>\n        {person.name} {person.number}\n        <button onClick={deleteThisPerson}>delete</button>\n      </li>\n    </div>\n  )\n}\n\nconst Field = ({ text, value, onChange }) => {\n  return(\n    <div>\n      {text} <input \n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  )\n}\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (type === 0) {\n    \n    return (\n      <div className=\"notification\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n  \n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ search, setSearch ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [errorType, setErrorType] = useState()\n\n  useEffect(() => {\n    personsService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const showNotification = (message) => {\n    setErrorType(0)\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n\n  const showError = (message) => {\n    setErrorType(1)\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n  \n  const addPerson = (event) => {\n    event.preventDefault()\n\n    if (newName === \"\") {\n      return(\"\")\n    }\n\n    if (persons.map(person => person.name).includes(newName)) {\n      const confirmation = window.confirm(`${newName} is already added to phonebook, replace the old number with the new one?`)\n\n      if (confirmation) {\n        const person = persons.find(p => p.name === newName)\n        const updatedPerson = {...person, number: newNumber}\n        personsService\n          .update(updatedPerson.id, updatedPerson)\n          .then(returnedPersons => {\n            personsService\n            .getAll()\n            .then(newPersons =>\n              {\n                setPersons(newPersons)\n                showNotification(`${updatedPerson.name} updated!`)\n              })\n          })\n          .catch(error => {\n            showError(`'${person.name}' was already removed from server`)\n            personsService\n            .getAll()\n            .then(newPersons =>\n              {\n                setPersons(newPersons)\n              })\n          })\n      }      \n    } else {\n      const nameObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personsService\n      .create(nameObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName(\"\")\n        setNewNumber(\"\")\n        showNotification(`${returnedPerson.name} added!`)\n      })\n      \n    }\n  }\n\n  const deletePerson = (person) => {\n    const confirmation = window.confirm(`Are you sure you want to delete ${person.name}?`)\n\n    if (confirmation) {\n      personsService\n        .deleteThis(person.id)\n        .then(returnedPersons => {\n          personsService\n          .getAll()\n          .then(newPersons =>\n            {\n              setPersons(newPersons)\n              showNotification(`${person.name} deleted!`)\n            })\n            .catch(error => {\n              showError(`'${person.name}' was already removed from server`)\n            })\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const personsToShow = persons.filter(person => person.name.includes(search))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} type={errorType} />\n      <Field text={\"Search for\"} value={search} onChange={handleSearchChange} />\n      <h3>Add new</h3>\n      <form onSubmit={addPerson}>\n        <Field text={\"Name:\"} value={newName} onChange={handleNameChange} />\n        <Field text={\"Number:\"} value={newNumber} onChange={handleNumberChange} />\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h3>Numbers</h3>\n      <PersonsDisplay persons={personsToShow} deleteAPerson={deletePerson} />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}